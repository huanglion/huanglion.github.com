<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CodePlay]]></title>
  <link href="http://huanglion.github.com/atom.xml" rel="self"/>
  <link href="http://huanglion.github.com/"/>
  <updated>2012-03-28T12:34:45+08:00</updated>
  <id>http://huanglion.github.com/</id>
  <author>
    <name><![CDATA[TimeMachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[method_missing Error]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/28/method-missing-classnotfound/"/>
    <updated>2012-03-28T09:44:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/28/method-missing-classnotfound</id>
    <content type="html"><![CDATA[<p>竟然被一个问题坑了很久。
错误提示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">## Generating Site with Jekyll</span>
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>Configuration from /home/xxxxxx/yyyyy.github.com/_config.yml
</span><span class='line'>Building site: <span class="nb">source</span> -&gt; public
</span><span class='line'>/home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/rubypython-0.5.1/lib/rubypython/rubypyproxy.rb:198:in <span class="sb">`</span>method_missing<span class="s1">&#39;:</span>
</span><span class='line'><span class="s1">ClassNotFound: no lexer for alias &#39;</span>ssh<span class="s1">&#39; found (RubyPython::PythonError)</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/pygments.rb-0.1.3/lib/pygments/ffi.rb:136:in `lexer_for&#39;</span>
</span><span class='line'>    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/pygments.rb-0.1.3/lib/pygments/ffi.rb:92:in <span class="sb">`</span>highlight<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/yyyyy.github.com/plugins/pygments_code.rb:24:in `pygments&#39;</span>
</span><span class='line'>    from /home/xxxxxx/yyyyy.github.com/plugins/pygments_code.rb:14:in <span class="sb">`</span>highlight<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/yyyyy.github.com/plugins/backtick_code_block.rb:37:in `block in render_code_block&#39;</span>
</span><span class='line'>    from /home/xxxxxx/yyyyy.github.com/plugins/backtick_code_block.rb:13:in <span class="sb">`</span>gsub<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/yyyyy.github.com/plugins/backtick_code_block.rb:13:in `render_code_block&#39;</span>
</span><span class='line'>    from /home/xxxxxx/yyyyy.github.com/plugins/octopress_filters.rb:12:in <span class="sb">`</span>pre_filter<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/yyyyy.github.com/plugins/octopress_filters.rb:27:in `pre_render&#39;</span>
</span><span class='line'>    from /home/xxxxxx/yyyyy.github.com/plugins/post_filters.rb:112:in <span class="sb">`</span>block in pre_render<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/yyyyy.github.com/plugins/post_filters.rb:111:in `each&#39;</span>
</span><span class='line'>    from /home/xxxxxx/yyyyy.github.com/plugins/post_filters.rb:111:in <span class="sb">`</span>pre_render<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/yyyyy.github.com/plugins/post_filters.rb:166:in `do_layout&#39;</span>
</span><span class='line'>    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/jekyll-0.11.0/lib/jekyll/post.rb:189:in <span class="sb">`</span>render<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/jekyll-0.11.0/lib/jekyll/site.rb:193:in `block in render&#39;</span>
</span><span class='line'>    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/jekyll-0.11.0/lib/jekyll/site.rb:192:in <span class="sb">`</span>each<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/jekyll-0.11.0/lib/jekyll/site.rb:192:in `render&#39;</span>
</span><span class='line'>    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/jekyll-0.11.0/lib/jekyll/site.rb:40:in <span class="sb">`</span>process<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/gems/jekyll-0.11.0/bin/jekyll:250:in `&lt;top (required)&gt;&#39;</span>
</span><span class='line'>    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/bin/jekyll:19:in <span class="sb">`</span>load<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    from /home/xxxxxx/.rvm/gems/ruby-1.9.2-p290/bin/jekyll:19:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个错误真的太假了。开始看到ClassNotFound: no lexer for alias &#8216;ssh&#8217; found 这一段，以为是连接不上SSH。其实是<code>source/_post/</code>里markdown文件里用了一个没有定义过的code标记:</p>

<pre><code>```ssh
abc defg 
```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mutiple SSH keys]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/25/mutiple-ssh-keys/"/>
    <updated>2012-03-25T15:29:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/25/mutiple-ssh-keys</id>
    <content type="html"><![CDATA[<p>大部分人只用一个身份去连接git(github.com)。也就只用到一个ssh key。有时候可能会想玩一些不同的东西，建立两个或者两个以上的用户。
但在连接的时候就有问题了，一个用户对应一个SSH key。现在就来设置一下多用户所要用到的多个SSH keys。</p>

<p>假设原本已经有了一个ssh key，现在还是一样用<code>ssh-keygen -t rsa -C 'secondUser@mail.com'</code> 在生成文件时候可以自己输入想要的文件名。后面的，都跟第一次生成密钥文件时候是一样的。</p>

<p>密钥生成了，就要加进SSH agent里去。<code>ssh-add ~/.ssh/id_rsa_2</code>
这时，哪个KEY对应哪个连接还要分清楚。
在<code>~/.ssh/</code>建立一个config文件。包含这些内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c"># Default github user(first@mail.com)</span>
</span><span class='line'><span class="nb">Host</span> github.com
</span><span class='line'><span class="nb">HostName</span> github.com
</span><span class='line'><span class="nb">User</span> git
</span><span class='line'><span class="nb">IdentityFile</span> C:/Users/username/.ssh/id_rsa
</span><span class='line'>
</span><span class='line'><span class="c"># second github user(second@mail.com)</span>
</span><span class='line'><span class="nb">Host</span> github-second
</span><span class='line'><span class="nb">HostName</span> github.com
</span><span class='line'><span class="nb">User</span> git
</span><span class='line'><span class="nb">IdentityFile</span> C:/Users/username/.ssh/id_rsa_2
</span></code></pre></td></tr></table></div></figure>


<p>第一个库加进来，可能是<code>git remote add origin git@github.com:githubUser/myProject1.git</code>这样加载的。
第二库可以这样连接：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#这里github-second是在config里设置的连接名字</span>
</span><span class='line'>git remote add myProject1 git@github-second:githubUser2/myProject1.git
</span></code></pre></td></tr></table></div></figure>


<p>另外，在另一个库的目录下面设置登录的用户名和邮箱。
原来设置的可能是全局的用户名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global user.name <span class="s2">&quot;userName&quot;</span>
</span><span class='line'>git config --global user.email <span class="s2">&quot;email@email.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在在第二个库的目录里可以设置一个只有进入这个目录才会启用的用户名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#默认已经 cd myProject1 </span>
</span><span class='line'>git config  user.name <span class="s2">&quot;userName2&quot;</span>
</span><span class='line'>git config  user.email <span class="s2">&quot;email2@email.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后再连接。<code>ssh -T git@github-second</code>这里也是不同了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache服务器设置多站点]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/05/apache-virtual-host/"/>
    <updated>2012-03-05T15:01:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/05/apache-virtual-host</id>
    <content type="html"><![CDATA[<p>在本机的Windows下设置的。</p>

<ol>
<li>随便写个域名，如 h.co；</li>
<li>在hosts文件里，添加<code>127.0.0.1 h.co</code>;</li>
<li>在httpd.conf文件里添加：</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="c">#这个是把域名指到对应文件夹</span>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">188.188.8.254</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nb">DocumentRoot</span> <span class="s2">&quot;G:\www&quot;</span>
</span><span class='line'><span class="nb">ServerName</span> h.co
</span><span class='line'><span class="nt">&lt;/Virtualhost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#这个是给指定的文件夹一定的权限</span>
</span><span class='line'><span class="nt">&lt;Directory</span> <span class="s">&quot;G:\www&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">None</span>
</span><span class='line'>    <span class="nb">Options</span> <span class="k">None</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'><span class="nt">&lt;/Directory&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果有多个域名，就多添加几个类似的内容就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux mint安装极点五笔]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/05/linux-mint-wubi/"/>
    <updated>2012-03-05T14:26:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/05/linux-mint-wubi</id>
    <content type="html"><![CDATA[<p>按官方的<a href="http://code.google.com/p/ibus">说明</a>安装ibus，但ibus没有提供极点五笔。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo add-apt-repository ppa:shawn-p-huang/ppa
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install ibus ibus-pinyin
</span><span class='line'><span class="nv">$ </span>sudo apt-get install ibus-gtk ibus-qt4
</span><span class='line'><span class="nv">$ </span>im-switch -s ibus
</span></code></pre></td></tr></table></div></figure>


<p>所以还要安装ibus-table<code>sudo apt-get install ibus-table</code>，再去<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=8&amp;t=262266">下载</a>极点五笔的码表并安装。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[转]Linux Mint 12 - iBus没有输入法图标的问题]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/05/linux-mint-ibus/"/>
    <updated>2012-03-05T14:15:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/05/linux-mint-ibus</id>
    <content type="html"><![CDATA[<p>裝好Linux Mint跟iBus後發現切換輸入法時iBus的系統匣顯示的是禁止符號的圖示，我使用的解決方法是在 <code>/usr/share/ibus/ui/gtk/panel.py</code>這個檔案中加入下面＋號後兩行的程式碼(因為是Python語法所以要注意程式碼前的空格數)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">state_changed</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">__focus_ic</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">enabled</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__focus_ic</span><span class="o">.</span><span class="n">is_enabled</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">__language_bar</span><span class="o">.</span><span class="n">set_enabled</span><span class="p">(</span><span class="n">enabled</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">enabled</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">reset</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__set_im_icon</span><span class="p">(</span><span class="n">ICON_KEYBOARD</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__set_im_name</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">engine</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__focus_ic</span><span class="o">.</span><span class="n">get_engine</span><span class="p">()</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">engine</span><span class="p">:</span>
</span><span class='line'><span class="o">+</span>               <span class="n">pixbuf</span> <span class="o">=</span> <span class="n">gdk</span><span class="o">.</span><span class="n">pixbuf_new_from_file</span><span class="p">(</span><span class="n">engine</span><span class="o">.</span><span class="n">icon</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span>               <span class="n">gtk</span><span class="o">.</span><span class="n">icon_theme_add_builtin_icon</span><span class="p">(</span><span class="n">engine</span><span class="o">.</span><span class="n">icon</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pixbuf</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__set_im_icon</span><span class="p">(</span><span class="n">engine</span><span class="o">.</span><span class="n">icon</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__set_im_name</span><span class="p">(</span><span class="n">engine</span><span class="o">.</span><span class="n">longname</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__set_im_icon</span><span class="p">(</span><span class="n">ICON_KEYBOARD</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__set_im_name</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣系統匣的輸入法圖示就可以正常顯示了</p>

<p><a href="http://dust-way.blogspot.com/2011/12/linux-mint-12-ibus.html" title="Linux Mint 12 安裝筆記 - iBus 系統匣輸入法圖示顯示問題排除">原文</a></p>

<p>另，如果ibus的提示框不跟随，可能是<code>ibus-gtk3</code>没有安装。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim新建文件的模板]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/05/vim-template/"/>
    <updated>2012-03-05T13:59:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/05/vim-template</id>
    <content type="html"><![CDATA[<p>在新建文件时，如果有针对该文件扩展名的模板存在，那么模板中的内容，将被自动插入进新文档中。将模板以正确的扩展名保存至<code>Vim/myTemplate</code>目录中。如果没有myTemplate目录，就创建一个。在Windows中，将模板文件html.tpl保存到<code>$Vim/vimfiles/myTemplate/</code>目录下；而在Mac/Liunx/Unix中，则保存模板文件至<code>~/.vim/myTemplate/</code></p>

<p>在<code>.vimrc</code>或<code>_vimrc</code>文件中，修改一些配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>#Windows:
</span><span class='line'>autocmd<span class="p">!</span> <span class="nb">BufNewFile</span> * <span class="k">silent</span><span class="p">!</span> <span class="m">0</span>r $VIM<span class="sr">/vimfiles/</span>myTemplate/%:<span class="k">e</span>.tpl
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>#Mac<span class="sr">/Liunx/</span>Unix:
</span><span class='line'>autocmd<span class="p">!</span> <span class="nb">BufNewFile</span> * <span class="k">silent</span><span class="p">!</span> <span class="m">0</span>r <span class="p">~</span><span class="sr">/.vim/</span>myTemplate/%:<span class="k">e</span>.tpl
</span></code></pre></td></tr></table></div></figure>


<p>在<code>:new test.html</code> / <code>:tabnew test.html</code>新建一个文件的时候，就会自动添加模板中的代码。</p>

<p>另外，在RedHat系列的系统(Fedora, CentOS等)里，gVim安装包叫vim-X11。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重新安装grub]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/05/install-grub/"/>
    <updated>2012-03-05T11:07:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/05/install-grub</id>
    <content type="html"><![CDATA[<p>前几天换了主机，那个主机的CPU（E6500）支持虚拟化。原来的CPU是E5200。整个硬盘换过去。上面有三个操作系统。但WIN7直接是打不开，Ubuntu 和 Linux Mint打开以后不显示鼠标，都是显卡驱动的问题。重装WIN7，但WINDOWS不引导其他操作系统。只能再装一次GRUB去引导其他两个LINUX。</p>

<p>用Ubuntu的Live CD进去，找好Ubuntu的所在分区。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="o">-</span><span class="n">i</span>
</span><span class='line'><span class="n">mount</span><span class="sr"> /dev/s</span><span class="n">da2</span><span class="sr"> /mnt</span>
</span><span class='line'><span class="sr">grub-install --root-directory=/mn</span><span class="n">t</span><span class="sr"> /dev/s</span><span class="n">da</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>/dev/sda2</code>是Linux所在分区，要挂载到Live CD启动的虚拟机。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress记录]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/02/octopress-notes-1/"/>
    <updated>2012-03-02T13:52:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/02/octopress-notes-1</id>
    <content type="html"><![CDATA[<p>按照octopress的指导，一般自己的库的主分支（master）是octopress最后生成的静态页面。整个后台都放到source分支去。octopress整个后台都是在客户机这里的，跟wordpress的不同。</p>

<p>换了新机器，把库克隆下来。进入目录，切换分支到source，绝大部分的修改和更新都是这里可以完成。暂时感觉是这样，没碰到要直接在生成的页面上修改的。在切换分支后如果直接用octopress一些相关命令如：<code>rake new_post['title']</code>，会提示安装。因为在刚进入这个目录时是主分支，没有备置文件，也就没启用octopress的备置文件了。切换分支source后，换到其他目录再回来，就会提示是否启用那个备置文件。确定一下就可以了。</p>

<p>新的地方去更新网站页面，也要先建立下连接。<code>rake setup_github_pages</code>，输入自己的库的地址：<code>git@github.com:githubUser/repositoryID.git</code>。后面就是跟第一次使用时的一样可以<code>rake generate</code>和<code>rake deploy</code>。</p>

<p>octopress系统会跟踪文件的修改，比如你在预览（preview）的时候，改了样式表，刷新页面就可以看到效果了。所有样式都可以在<code>sass</code>这个文件夹里。要让字体显示是“微软雅黑”，可以在<code>sass/custom/_font.scss</code>把注释“//”去掉，再修改，<code>$sans: "Microsoft YaHei", "Optima", sans-serif;</code>。把所有链接的下划线去掉，这些链接的颜色已经足于识别了。在<code>sass/base/_theme.scss</code>修改。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress记录]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/02/octopress-1/"/>
    <updated>2012-03-02T13:52:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/02/octopress-1</id>
    <content type="html"><![CDATA[<p>按照octopress的指导，一般自己的库的主分支（master）是octopress最后生成的静态页面。整个后台都放到source分支去。octopress整个后台都是在客户机这里的，跟wordpress的不同。</p>

<p>换了新机器，把库克隆下来。进入目录，切换分支到source，绝大部分的修改和更新都是这里可以完成。暂时感觉是这样，没碰到要直接在生成的页面上修改的。在切换分支后如果直接用octopress一些相关命令如：<code>rake new_post['title']</code>，会提示安装。因为在刚进入这个目录时是主分支，没有备置文件，也就没启用octopress的备置文件了。切换分支source后，换到其他目录再回来，就会提示是否启用那个备置文件。确定一下就可以了。</p>

<p>新的地方去更新网站页面，也要先建立下连接。<code>rake setup_github_pages</code>，输入自己的库的地址：<code>git@github.com:githubUser/repositoryID.git</code>。后面就是跟第一次使用时的一样可以<code>rake generate</code>和<code>rake deploy</code>。</p>

<p>octopress系统会跟踪文件的修改，比如你在预览（preview）的时候，改了样式表，刷新页面就可以看到效果了。所有样式都可以在<code>sass</code>这个文件夹里。要让字体显示是“微软雅黑”，可以在<code>sass/custom/_font.scss</code>把注释“//”去掉，再修改，<code>$sans: "Microsoft YaHei", "Optima", sans-serif;</code>。把所有链接的下划线去掉，这些链接的颜色已经足于识别了。在<code>sass/base/_theme.scss</code>修改。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[proxychains]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/01/proxychains/"/>
    <updated>2012-03-01T15:09:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/01/proxychains</id>
    <content type="html"><![CDATA[<p><a href="http://sourceforge.net/projects/proxychains/" title="ProxyChains - HTTP and SOCKS">ProxyChains</a> 很好用，配合<a href="http://code.google.com/p/wallproxy-plugins/downloads/list" title="a Powerful GAE/PHP proxy with BEST Security which is Easy to use">WallProxy</a>的话。</p>

<p>在搭建OctoPress的时候，要下载一个100K的文件，却一直下载失败，发现是连接被重置了很多。先是想用VPN，但没找到好用的，只能找其它代理了。网上找到了proxyChains，wallProxy刚好可以用socks代理。配合一起用了一段时间，感觉很不错。在正常的命令前加个proxychains就行了，<code>proxychains git clone http://github.com/joyent/node.git</code>。</p>

<p>在Ubuntu里可以直接安装，其他系统就没试过。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$sudo</span> apt-get install proxychains
</span></code></pre></td></tr></table></div></figure>


<p>安装好后修改proxychains的配置文件<code>sodo vim /etc/proxychains.conf</code>，把最后一行改成自己要用的代理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">socks5</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="mi">8086</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT笔记（1）]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/01/git-notes-1/"/>
    <updated>2012-03-01T11:05:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/01/git-notes-1</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#clone下来的是整个库的文件，包括所有分支</span>
</span><span class='line'><span class="nv">$ </span>git clone git@github.com:gitUser/repositoryName.git
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gitUsergitUser  <span class="c">#默认进入的目录就是主分支master</span>
</span><span class='line'><span class="nv">$ </span>git branch         <span class="c">#打印出当前分支</span>
</span><span class='line'><span class="nv">$ </span>git branch -a      <span class="c">#打印出所有分支</span>
</span><span class='line'><span class="nv">$ </span>git checkout -b <span class="nb">source </span>origin/source    <span class="c">#新建一个本地跟踪分支</span>
</span><span class='line'><span class="nv">$ </span>git checkout <span class="nb">source</span>     <span class="c">#切换到source分支</span>
</span></code></pre></td></tr></table></div></figure>


<p>GIT切换分支很容易，但在文件系统里看却很神奇，没搞明白怎么实现的。当<code>git clone</code>下来的整个库，里面有所有分支，第一次进去看，却只有主分支的文件在。用<code>Ctrl + H</code>也看不到，（猜）应该不是隐藏的。但在切换分支以后，在文件夹里立刻就看到新切换到的当前分支的文件，其他分支的文件又都看不到了，很有意思。</p>

<p>git提交的步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add some.file
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;message&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT笔记（1）]]></title>
    <link href="http://huanglion.github.com/blog/2012/03/01/git-1/"/>
    <updated>2012-03-01T11:05:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/03/01/git-1</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#clone下来的是整个库的文件，包括所有分支</span>
</span><span class='line'><span class="nv">$ </span>git clone git@github.com:gitUser/repositoryName.git
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>gitUsergitUser  <span class="c">#默认进入的目录就是主分支master</span>
</span><span class='line'><span class="nv">$ </span>git branch         <span class="c">#打印出当前分支</span>
</span><span class='line'><span class="nv">$ </span>git branch -a      <span class="c">#打印出所有分支</span>
</span><span class='line'><span class="nv">$ </span>git checkout -b <span class="nb">source </span>origin/source    <span class="c">#新建一个本地跟踪分支</span>
</span><span class='line'><span class="nv">$ </span>git checkout <span class="nb">source</span>     <span class="c">#切换到source分支</span>
</span></code></pre></td></tr></table></div></figure>


<p>GIT切换分支很容易，但在文件系统里看却很神奇，没搞明白怎么实现的。当<code>git clone</code>下来的整个库，里面有所有分支，第一次进去看，却只有主分支的文件在。用<code>Ctrl + H</code>也看不到，（猜）应该不是隐藏的。但在切换分支以后，在文件夹里立刻就看到新切换到的当前分支的文件，其他分支的文件又都看不到了，很有意思。</p>

<p>git提交的步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add some.file
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;message&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://huanglion.github.com/blog/2012/02/21/hello-world/"/>
    <updated>2012-02-21T16:41:00+08:00</updated>
    <id>http://huanglion.github.com/blog/2012/02/21/hello-world</id>
    <content type="html"><![CDATA[<p><em>新的世界</em></p>

<p>大家都越来越爱折腾了，或者说有更多的人动手去创建属于自己的天地，并把它展示出来。曾经一个口号（好像是）叫，“<em>技术宅拯救世界</em>”。现在网络上的很多应用都非商业的，大家业余时间去做，分享出来。</p>

<p>09年才发现有墙，从最初用几K每秒的套（<a href="https://www.torproject.org/" title="Tor Project: Anonymity Online">Tor</a>），到现在几百K每秒的<a href="http://code.google.com/appengine/" title="Google App Engine">GAE</a>。从IE6，到现在的chrome/firefox/opera。各种翻墙工具，各种浏览器插件，玩得很有意思。</p>

<p>现在玩起这个来，感觉良好。</p>

<h3>Hello world!</h3>
]]></content>
  </entry>
  
</feed>
